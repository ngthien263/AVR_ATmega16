
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000098c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000098c  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006c  0080006c  00000a2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001353  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a30  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5b  00000000  00000000  00002923  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00003380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  000035e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eb2  00000000  00000000  00003aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a2 02 	call	0x544	; 0x544 <main>
  8a:	0c 94 c4 04 	jmp	0x988	; 0x988 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_command>:
	unsigned char address;
	if(y != 1)
	address = 0xC0 + x - 1;
	else
	address = 0x80 + x - 1;
	LCD_command(address);
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9b 7f       	andi	r25, 0xFB	; 251
  96:	98 bb       	out	0x18, r25	; 24
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	9d 7f       	andi	r25, 0xFD	; 253
  9c:	98 bb       	out	0x18, r25	; 24
  9e:	ef ec       	ldi	r30, 0xCF	; 207
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_command+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_command+0x16>
  a8:	00 00       	nop
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	8f ec       	ldi	r24, 0xCF	; 207
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_command+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_command+0x2a>
  bc:	00 00       	nop
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	ef e6       	ldi	r30, 0x6F	; 111
  c6:	f7 e1       	ldi	r31, 0x17	; 23
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_command+0x36>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_command+0x3c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <LCD_data>:
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	94 60       	ori	r25, 0x04	; 4
  d6:	98 bb       	out	0x18, r25	; 24
  d8:	98 b3       	in	r25, 0x18	; 24
  da:	9d 7f       	andi	r25, 0xFD	; 253
  dc:	98 bb       	out	0x18, r25	; 24
  de:	ef ec       	ldi	r30, 0xCF	; 207
  e0:	f7 e0       	ldi	r31, 0x07	; 7
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_data+0x10>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_data+0x16>
  e8:	00 00       	nop
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	8f ec       	ldi	r24, 0xCF	; 207
  f4:	97 e0       	ldi	r25, 0x07	; 7
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_data+0x24>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_data+0x2a>
  fc:	00 00       	nop
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	8e 7f       	andi	r24, 0xFE	; 254
 102:	88 bb       	out	0x18, r24	; 24
 104:	ef ec       	ldi	r30, 0xCF	; 207
 106:	f7 e0       	ldi	r31, 0x07	; 7
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_data+0x36>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_data+0x3c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <LCD_init>:
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	81 bb       	out	0x11, r24	; 17
 116:	87 b3       	in	r24, 0x17	; 23
 118:	87 60       	ori	r24, 0x07	; 7
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	8f ec       	ldi	r24, 0xCF	; 207
 11e:	97 e0       	ldi	r25, 0x07	; 7
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_init+0xe>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_init+0x14>
 126:	00 00       	nop
 128:	88 e3       	ldi	r24, 0x38	; 56
 12a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	97 e0       	ldi	r25, 0x07	; 7
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_init+0x26>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_init+0x2c>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <LCD_clear>:
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 148:	8f e9       	ldi	r24, 0x9F	; 159
 14a:	9f e0       	ldi	r25, 0x0F	; 15
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_clear+0xa>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_clear+0x10>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <LCD_print>:
}

void LCD_print(const char *str) {
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ec 01       	movw	r28, r24
	while(*str) {
 15c:	03 c0       	rjmp	.+6      	; 0x164 <LCD_print+0xe>
		LCD_data(*str++);
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_data>
	address = 0x80 + x - 1;
	LCD_command(address);
}

void LCD_print(const char *str) {
	while(*str) {
 164:	88 81       	ld	r24, Y
 166:	81 11       	cpse	r24, r1
 168:	fa cf       	rjmp	.-12     	; 0x15e <LCD_print+0x8>
		LCD_data(*str++);
	}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <reset>:
extern float temp;

uint8_t reset()
{
	uint8_t re;
	SENSOR_CONTROL_DDR |= (1<<WIRE_PIN);
 170:	8a b3       	in	r24, 0x1a	; 26
 172:	81 60       	ori	r24, 0x01	; 1
 174:	8a bb       	out	0x1a, r24	; 26
	SENSOR_CONTROL_PORT &= ~(1<<WIRE_PIN);
 176:	8b b3       	in	r24, 0x1b	; 27
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f eb       	ldi	r24, 0xBF	; 191
 17e:	93 e0       	ldi	r25, 0x03	; 3
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <reset+0x10>
 184:	00 c0       	rjmp	.+0      	; 0x186 <reset+0x16>
 186:	00 00       	nop
	_delay_us(480);
	SENSOR_CONTROL_DDR &= ~(1<<WIRE_PIN);
 188:	8a b3       	in	r24, 0x1a	; 26
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	8a bb       	out	0x1a, r24	; 26
 18e:	9a eb       	ldi	r25, 0xBA	; 186
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <reset+0x20>
 194:	00 c0       	rjmp	.+0      	; 0x196 <reset+0x26>
	_delay_us(70);
	re = SENSOR_CONTROL_PIN & (1<<WIRE_PIN);
 196:	89 b3       	in	r24, 0x19	; 25
 198:	81 70       	andi	r24, 0x01	; 1
 19a:	e7 e4       	ldi	r30, 0x47	; 71
 19c:	f3 e0       	ldi	r31, 0x03	; 3
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <reset+0x2e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <reset+0x34>
 1a4:	00 00       	nop
	_delay_us(420);
	return re;
}
 1a6:	08 95       	ret

000001a8 <write1>:

void write1()
{
	SENSOR_CONTROL_DDR |= (1<<WIRE_PIN);
 1a8:	8a b3       	in	r24, 0x1a	; 26
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	8a bb       	out	0x1a, r24	; 26
	SENSOR_CONTROL_PORT &= ~(1<<WIRE_PIN);
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	8e 7f       	andi	r24, 0xFE	; 254
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	80 e1       	ldi	r24, 0x10	; 16
 1b6:	8a 95       	dec	r24
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <write1+0xe>
	_delay_us(6);
	SENSOR_CONTROL_DDR &= ~(1<<WIRE_PIN);
 1ba:	8a b3       	in	r24, 0x1a	; 26
 1bc:	8e 7f       	andi	r24, 0xFE	; 254
 1be:	8a bb       	out	0x1a, r24	; 26
 1c0:	8a ea       	ldi	r24, 0xAA	; 170
 1c2:	8a 95       	dec	r24
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <write1+0x1a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <write1+0x20>
 1c8:	08 95       	ret

000001ca <write0>:
	_delay_us(64);
}

void write0()
{
	SENSOR_CONTROL_DDR |= (1<<WIRE_PIN);
 1ca:	8a b3       	in	r24, 0x1a	; 26
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	8a bb       	out	0x1a, r24	; 26
	SENSOR_CONTROL_PORT &= ~(1<<WIRE_PIN);
 1d0:	8b b3       	in	r24, 0x1b	; 27
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	8b bb       	out	0x1b, r24	; 27
 1d6:	80 ea       	ldi	r24, 0xA0	; 160
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <write0+0xe>
	_delay_us(60);
	SENSOR_CONTROL_DDR &= ~(1<<WIRE_PIN);
 1dc:	8a b3       	in	r24, 0x1a	; 26
 1de:	8e 7f       	andi	r24, 0xFE	; 254
 1e0:	8a bb       	out	0x1a, r24	; 26
 1e2:	8a e1       	ldi	r24, 0x1A	; 26
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <write0+0x1a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <write0+0x20>
 1ea:	08 95       	ret

000001ec <writebit>:
	_delay_us(10);
}

void writebit(unsigned char bit)
{
	if(bit==1)
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <writebit+0xa>
		write1();
 1f0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <write1>
 1f4:	08 95       	ret
	else
		write0();
 1f6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write0>
 1fa:	08 95       	ret

000001fc <readbit>:
}

uint8_t readbit()
{
	uint8_t res;
	SENSOR_CONTROL_DDR |= (1<<WIRE_PIN);
 1fc:	8a b3       	in	r24, 0x1a	; 26
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	8a bb       	out	0x1a, r24	; 26
	SENSOR_CONTROL_PORT &= ~(1<<WIRE_PIN);
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	8e 7f       	andi	r24, 0xFE	; 254
 206:	8b bb       	out	0x1b, r24	; 27
 208:	80 e1       	ldi	r24, 0x10	; 16
 20a:	8a 95       	dec	r24
 20c:	f1 f7       	brne	.-4      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
	_delay_us(6);
	SENSOR_CONTROL_DDR &= ~(1<<WIRE_PIN);
 20e:	8a b3       	in	r24, 0x1a	; 26
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	8a bb       	out	0x1a, r24	; 26
 214:	98 e1       	ldi	r25, 0x18	; 24
 216:	9a 95       	dec	r25
 218:	f1 f7       	brne	.-4      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
	_delay_us(9);
	res = SENSOR_CONTROL_PIN & (1<<WIRE_PIN);
 21a:	89 b3       	in	r24, 0x19	; 25
 21c:	81 70       	andi	r24, 0x01	; 1
 21e:	92 e9       	ldi	r25, 0x92	; 146
 220:	9a 95       	dec	r25
 222:	f1 f7       	brne	.-4      	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 224:	00 c0       	rjmp	.+0      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
	_delay_us(55);
	return res;
}
 226:	08 95       	ret

00000228 <writebyte>:

void writebyte(unsigned char byte)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	d8 2f       	mov	r29, r24
	unsigned char i;
	for(i = 0; i < 8; i++)
 22e:	c0 e0       	ldi	r28, 0x00	; 0
 230:	0c c0       	rjmp	.+24     	; 0x24a <writebyte+0x22>
	{
		writebit((byte>>i) & 0x01);
 232:	8d 2f       	mov	r24, r29
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0c 2e       	mov	r0, r28
 238:	02 c0       	rjmp	.+4      	; 0x23e <writebyte+0x16>
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <writebyte+0x12>
 242:	81 70       	andi	r24, 0x01	; 1
 244:	0e 94 f6 00 	call	0x1ec	; 0x1ec <writebit>
}

void writebyte(unsigned char byte)
{
	unsigned char i;
	for(i = 0; i < 8; i++)
 248:	cf 5f       	subi	r28, 0xFF	; 255
 24a:	c8 30       	cpi	r28, 0x08	; 8
 24c:	90 f3       	brcs	.-28     	; 0x232 <writebyte+0xa>
	{
		writebit((byte>>i) & 0x01);
	}
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <readbyte>:

uint8_t readbyte()
{
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
	unsigned char i;
	uint8_t n=0;
 258:	d0 e0       	ldi	r29, 0x00	; 0
	for(i = 0; i < 8; i++)
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	0b c0       	rjmp	.+22     	; 0x274 <readbyte+0x20>
	{
		n |= (readbit()<<i);
 25e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <readbit>
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0c 2e       	mov	r0, r28
 266:	02 c0       	rjmp	.+4      	; 0x26c <readbyte+0x18>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <readbyte+0x14>
 270:	d8 2b       	or	r29, r24

uint8_t readbyte()
{
	unsigned char i;
	uint8_t n=0;
	for(i = 0; i < 8; i++)
 272:	cf 5f       	subi	r28, 0xFF	; 255
 274:	c8 30       	cpi	r28, 0x08	; 8
 276:	98 f3       	brcs	.-26     	; 0x25e <readbyte+0xa>
	{
		n |= (readbit()<<i);
	}
	return n;
}
 278:	8d 2f       	mov	r24, r29
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <readTemp>:

float readTemp()
{
 280:	cf 93       	push	r28
	unsigned char iTempL;
	unsigned char iTempH;
	float ftemp = 0;
	reset();
 282:	0e 94 b8 00 	call	0x170	; 0x170 <reset>
	writebyte(SKIPROM);
 286:	8c ec       	ldi	r24, 0xCC	; 204
 288:	0e 94 14 01 	call	0x228	; 0x228 <writebyte>
	writebyte(CONVERT_T);
 28c:	84 e4       	ldi	r24, 0x44	; 68
 28e:	0e 94 14 01 	call	0x228	; 0x228 <writebyte>
	while(!readbit());
 292:	0e 94 fe 00 	call	0x1fc	; 0x1fc <readbit>
 296:	88 23       	and	r24, r24
 298:	e1 f3       	breq	.-8      	; 0x292 <readTemp+0x12>
	reset();
 29a:	0e 94 b8 00 	call	0x170	; 0x170 <reset>
	writebyte(SKIPROM);
 29e:	8c ec       	ldi	r24, 0xCC	; 204
 2a0:	0e 94 14 01 	call	0x228	; 0x228 <writebyte>
	writebyte(RSCRATCHPAD);
 2a4:	8e eb       	ldi	r24, 0xBE	; 190
 2a6:	0e 94 14 01 	call	0x228	; 0x228 <writebyte>
	iTempL = readbyte();
 2aa:	0e 94 2a 01 	call	0x254	; 0x254 <readbyte>
 2ae:	c8 2f       	mov	r28, r24
	iTempH = readbyte() ;
 2b0:	0e 94 2a 01 	call	0x254	; 0x254 <readbyte>
	ftemp = ( ( iTempH << 8 ) + iTempL ) * 0.0625;
 2b4:	68 2f       	mov	r22, r24
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	76 2f       	mov	r23, r22
 2ba:	66 27       	eor	r22, r22
 2bc:	6c 0f       	add	r22, r28
 2be:	71 1d       	adc	r23, r1
 2c0:	07 2e       	mov	r0, r23
 2c2:	00 0c       	add	r0, r0
 2c4:	88 0b       	sbc	r24, r24
 2c6:	99 0b       	sbc	r25, r25
 2c8:	0e 94 80 03 	call	0x700	; 0x700 <__floatsisf>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	40 e8       	ldi	r20, 0x80	; 128
 2d2:	5d e3       	ldi	r21, 0x3D	; 61
 2d4:	0e 94 35 04 	call	0x86a	; 0x86a <__mulsf3>
	return ftemp;
}
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <handleLED>:

void handleLED(float wTemp)
{
 2dc:	4f 92       	push	r4
 2de:	5f 92       	push	r5
 2e0:	6f 92       	push	r6
 2e2:	7f 92       	push	r7
 2e4:	8f 92       	push	r8
 2e6:	9f 92       	push	r9
 2e8:	af 92       	push	r10
 2ea:	bf 92       	push	r11
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	4b 01       	movw	r8, r22
 2f6:	5c 01       	movw	r10, r24
	if(temp < wTemp - 0.5)
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	5f e3       	ldi	r21, 0x3F	; 63
 300:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__subsf3>
 304:	2b 01       	movw	r4, r22
 306:	3c 01       	movw	r6, r24
 308:	c0 90 6c 00 	lds	r12, 0x006C	; 0x80006c <__data_end>
 30c:	d0 90 6d 00 	lds	r13, 0x006D	; 0x80006d <__data_end+0x1>
 310:	e0 90 6e 00 	lds	r14, 0x006E	; 0x80006e <__data_end+0x2>
 314:	f0 90 6f 00 	lds	r15, 0x006F	; 0x80006f <__data_end+0x3>
 318:	a7 01       	movw	r20, r14
 31a:	96 01       	movw	r18, r12
 31c:	0e 94 30 04 	call	0x860	; 0x860 <__gesf2>
 320:	18 16       	cp	r1, r24
 322:	24 f4       	brge	.+8      	; 0x32c <handleLED+0x50>
	{
		LED_CONTROL_PORT |= (1<<LED_R); 
 324:	85 b3       	in	r24, 0x15	; 21
 326:	88 60       	ori	r24, 0x08	; 8
 328:	85 bb       	out	0x15, r24	; 21
 32a:	29 c0       	rjmp	.+82     	; 0x37e <handleLED+0xa2>
	}
	else if(temp > wTemp + 0.5)
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	40 e0       	ldi	r20, 0x00	; 0
 332:	5f e3       	ldi	r21, 0x3F	; 63
 334:	c5 01       	movw	r24, r10
 336:	b4 01       	movw	r22, r8
 338:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__addsf3>
 33c:	4b 01       	movw	r8, r22
 33e:	5c 01       	movw	r10, r24
 340:	9b 01       	movw	r18, r22
 342:	ac 01       	movw	r20, r24
 344:	c7 01       	movw	r24, r14
 346:	b6 01       	movw	r22, r12
 348:	0e 94 30 04 	call	0x860	; 0x860 <__gesf2>
 34c:	18 16       	cp	r1, r24
 34e:	24 f4       	brge	.+8      	; 0x358 <handleLED+0x7c>
	{
		LED_CONTROL_PORT |= (1<<LED_G); 
 350:	85 b3       	in	r24, 0x15	; 21
 352:	80 62       	ori	r24, 0x20	; 32
 354:	85 bb       	out	0x15, r24	; 21
 356:	13 c0       	rjmp	.+38     	; 0x37e <handleLED+0xa2>
	}
	else if((wTemp - 0.5 < temp) && (temp < wTemp + 0.5))
 358:	a7 01       	movw	r20, r14
 35a:	96 01       	movw	r18, r12
 35c:	c3 01       	movw	r24, r6
 35e:	b2 01       	movw	r22, r4
 360:	0e 94 43 03 	call	0x686	; 0x686 <__cmpsf2>
 364:	88 23       	and	r24, r24
 366:	5c f4       	brge	.+22     	; 0x37e <handleLED+0xa2>
 368:	a5 01       	movw	r20, r10
 36a:	94 01       	movw	r18, r8
 36c:	c7 01       	movw	r24, r14
 36e:	b6 01       	movw	r22, r12
 370:	0e 94 43 03 	call	0x686	; 0x686 <__cmpsf2>
 374:	88 23       	and	r24, r24
 376:	1c f4       	brge	.+6      	; 0x37e <handleLED+0xa2>
	{
		LED_CONTROL_PORT |= (1<<LED_Y); 
 378:	85 b3       	in	r24, 0x15	; 21
 37a:	80 61       	ori	r24, 0x10	; 16
 37c:	85 bb       	out	0x15, r24	; 21
	}
}
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	df 90       	pop	r13
 384:	cf 90       	pop	r12
 386:	bf 90       	pop	r11
 388:	af 90       	pop	r10
 38a:	9f 90       	pop	r9
 38c:	8f 90       	pop	r8
 38e:	7f 90       	pop	r7
 390:	6f 90       	pop	r6
 392:	5f 90       	pop	r5
 394:	4f 90       	pop	r4
 396:	08 95       	ret

00000398 <reverse>:
		}
	}
	if(isNegative)
	str[i++] = '-';
	reverse(str);
}
 398:	ac 01       	movw	r20, r24
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <reverse+0x8>
 39e:	9f 5f       	subi	r25, 0xFF	; 255
 3a0:	fa 01       	movw	r30, r20
 3a2:	e9 0f       	add	r30, r25
 3a4:	f1 1d       	adc	r31, r1
 3a6:	80 81       	ld	r24, Z
 3a8:	81 11       	cpse	r24, r1
 3aa:	f9 cf       	rjmp	.-14     	; 0x39e <reverse+0x6>
 3ac:	91 50       	subi	r25, 0x01	; 1
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	0c c0       	rjmp	.+24     	; 0x3ca <reverse+0x32>
 3b2:	da 01       	movw	r26, r20
 3b4:	a2 0f       	add	r26, r18
 3b6:	b1 1d       	adc	r27, r1
 3b8:	8c 91       	ld	r24, X
 3ba:	fa 01       	movw	r30, r20
 3bc:	e9 0f       	add	r30, r25
 3be:	f1 1d       	adc	r31, r1
 3c0:	30 81       	ld	r19, Z
 3c2:	3c 93       	st	X, r19
 3c4:	80 83       	st	Z, r24
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	91 50       	subi	r25, 0x01	; 1
 3ca:	29 17       	cp	r18, r25
 3cc:	90 f3       	brcs	.-28     	; 0x3b2 <reverse+0x1a>
 3ce:	08 95       	ret

000003d0 <float_to_string>:

void float_to_string(float num, char *str)
{
 3d0:	8f 92       	push	r8
 3d2:	9f 92       	push	r9
 3d4:	af 92       	push	r10
 3d6:	bf 92       	push	r11
 3d8:	ff 92       	push	r15
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	4b 01       	movw	r8, r22
 3e4:	5c 01       	movw	r10, r24
 3e6:	ea 01       	movw	r28, r20
	int isNegative = 0;
	unsigned char i = 0;
	if(num < 0)
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	0e 94 43 03 	call	0x686	; 0x686 <__cmpsf2>
 3f2:	88 23       	and	r24, r24
 3f4:	3c f4       	brge	.+14     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
	{
		isNegative = 1;
		num = -num;
 3f6:	b7 fa       	bst	r11, 7
 3f8:	b0 94       	com	r11
 3fa:	b7 f8       	bld	r11, 7
 3fc:	b0 94       	com	r11
{
	int isNegative = 0;
	unsigned char i = 0;
	if(num < 0)
	{
		isNegative = 1;
 3fe:	01 e0       	ldi	r16, 0x01	; 1
 400:	10 e0       	ldi	r17, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__DATA_REGION_LENGTH__+0x8>
	reverse(str);
}

void float_to_string(float num, char *str)
{
	int isNegative = 0;
 404:	00 e0       	ldi	r16, 0x00	; 0
 406:	10 e0       	ldi	r17, 0x00	; 0
	if(num < 0)
	{
		isNegative = 1;
		num = -num;
	}
	uint32_t int_part = (uint32_t)num;
 408:	c5 01       	movw	r24, r10
 40a:	b4 01       	movw	r22, r8
 40c:	0e 94 4f 03 	call	0x69e	; 0x69e <__fixunssfsi>
}

void float_to_string(float num, char *str)
{
	int isNegative = 0;
	unsigned char i = 0;
 410:	f1 2c       	mov	r15, r1
	{
		isNegative = 1;
		num = -num;
	}
	uint32_t int_part = (uint32_t)num;
	while(int_part != 0)
 412:	10 c0       	rjmp	.+32     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
	{
		uint32_t rem1 = int_part % 10;
 414:	2a e0       	ldi	r18, 0x0A	; 10
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	0e 94 a2 04 	call	0x944	; 0x944 <__udivmodsi4>
		str[i++] = rem1 + '0';
 420:	fe 01       	movw	r30, r28
 422:	ef 0d       	add	r30, r15
 424:	f1 1d       	adc	r31, r1
 426:	60 5d       	subi	r22, 0xD0	; 208
 428:	60 83       	st	Z, r22
		int_part = int_part / 10;
 42a:	62 2f       	mov	r22, r18
 42c:	73 2f       	mov	r23, r19
 42e:	84 2f       	mov	r24, r20
 430:	95 2f       	mov	r25, r21
	}
	uint32_t int_part = (uint32_t)num;
	while(int_part != 0)
	{
		uint32_t rem1 = int_part % 10;
		str[i++] = rem1 + '0';
 432:	f3 94       	inc	r15
	{
		isNegative = 1;
		num = -num;
	}
	uint32_t int_part = (uint32_t)num;
	while(int_part != 0)
 434:	61 15       	cp	r22, r1
 436:	71 05       	cpc	r23, r1
 438:	81 05       	cpc	r24, r1
 43a:	91 05       	cpc	r25, r1
 43c:	59 f7       	brne	.-42     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
	{
		uint32_t rem1 = int_part % 10;
		str[i++] = rem1 + '0';
		int_part = int_part / 10;
	}
	if(num < 1)
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	40 e8       	ldi	r20, 0x80	; 128
 444:	5f e3       	ldi	r21, 0x3F	; 63
 446:	c5 01       	movw	r24, r10
 448:	b4 01       	movw	r22, r8
 44a:	0e 94 43 03 	call	0x686	; 0x686 <__cmpsf2>
 44e:	88 23       	and	r24, r24
 450:	34 f4       	brge	.+12     	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
	{
		str[i++] = '0';
 452:	fe 01       	movw	r30, r28
 454:	ef 0d       	add	r30, r15
 456:	f1 1d       	adc	r31, r1
 458:	80 e3       	ldi	r24, 0x30	; 48
 45a:	80 83       	st	Z, r24
 45c:	f3 94       	inc	r15
	}
	if(isNegative)
 45e:	01 2b       	or	r16, r17
 460:	31 f0       	breq	.+12     	; 0x46e <__stack+0xf>
	str[i++] = '-';
 462:	fe 01       	movw	r30, r28
 464:	ef 0d       	add	r30, r15
 466:	f1 1d       	adc	r31, r1
 468:	8d e2       	ldi	r24, 0x2D	; 45
 46a:	80 83       	st	Z, r24
 46c:	f3 94       	inc	r15
	reverse(str);
 46e:	ce 01       	movw	r24, r28
 470:	0e 94 cc 01 	call	0x398	; 0x398 <reverse>
	str[i++] = '.';
 474:	11 e0       	ldi	r17, 0x01	; 1
 476:	1f 0d       	add	r17, r15
 478:	fe 01       	movw	r30, r28
 47a:	ef 0d       	add	r30, r15
 47c:	f1 1d       	adc	r31, r1
 47e:	8e e2       	ldi	r24, 0x2E	; 46
 480:	80 83       	st	Z, r24
	float decimal_part = num - (int)num;
 482:	c5 01       	movw	r24, r10
 484:	b4 01       	movw	r22, r8
 486:	0e 94 48 03 	call	0x690	; 0x690 <__fixsfsi>
 48a:	07 2e       	mov	r0, r23
 48c:	00 0c       	add	r0, r0
 48e:	88 0b       	sbc	r24, r24
 490:	99 0b       	sbc	r25, r25
 492:	0e 94 80 03 	call	0x700	; 0x700 <__floatsisf>
 496:	9b 01       	movw	r18, r22
 498:	ac 01       	movw	r20, r24
 49a:	c5 01       	movw	r24, r10
 49c:	b4 01       	movw	r22, r8
 49e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__subsf3>
	for(unsigned char k = 0; k < 6; k++)
 4a2:	00 e0       	ldi	r16, 0x00	; 0
 4a4:	27 c0       	rjmp	.+78     	; 0x4f4 <__stack+0x95>
	{
		decimal_part *= 10;
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 e2       	ldi	r20, 0x20	; 32
 4ac:	51 e4       	ldi	r21, 0x41	; 65
 4ae:	0e 94 35 04 	call	0x86a	; 0x86a <__mulsf3>
 4b2:	4b 01       	movw	r8, r22
 4b4:	5c 01       	movw	r10, r24
		int rem = (int)(decimal_part + 0.001);
 4b6:	2f e6       	ldi	r18, 0x6F	; 111
 4b8:	32 e1       	ldi	r19, 0x12	; 18
 4ba:	43 e8       	ldi	r20, 0x83	; 131
 4bc:	5a e3       	ldi	r21, 0x3A	; 58
 4be:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__addsf3>
 4c2:	0e 94 48 03 	call	0x690	; 0x690 <__fixsfsi>
		str[i++] = rem + '0';
 4c6:	ff 24       	eor	r15, r15
 4c8:	f3 94       	inc	r15
 4ca:	f1 0e       	add	r15, r17
 4cc:	fe 01       	movw	r30, r28
 4ce:	e1 0f       	add	r30, r17
 4d0:	f1 1d       	adc	r31, r1
 4d2:	20 e3       	ldi	r18, 0x30	; 48
 4d4:	26 0f       	add	r18, r22
 4d6:	20 83       	st	Z, r18
		decimal_part -= rem;
 4d8:	07 2e       	mov	r0, r23
 4da:	00 0c       	add	r0, r0
 4dc:	88 0b       	sbc	r24, r24
 4de:	99 0b       	sbc	r25, r25
 4e0:	0e 94 80 03 	call	0x700	; 0x700 <__floatsisf>
 4e4:	9b 01       	movw	r18, r22
 4e6:	ac 01       	movw	r20, r24
 4e8:	c5 01       	movw	r24, r10
 4ea:	b4 01       	movw	r22, r8
 4ec:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__subsf3>
	if(isNegative)
	str[i++] = '-';
	reverse(str);
	str[i++] = '.';
	float decimal_part = num - (int)num;
	for(unsigned char k = 0; k < 6; k++)
 4f0:	0f 5f       	subi	r16, 0xFF	; 255
	{
		decimal_part *= 10;
		int rem = (int)(decimal_part + 0.001);
		str[i++] = rem + '0';
 4f2:	1f 2d       	mov	r17, r15
	if(isNegative)
	str[i++] = '-';
	reverse(str);
	str[i++] = '.';
	float decimal_part = num - (int)num;
	for(unsigned char k = 0; k < 6; k++)
 4f4:	06 30       	cpi	r16, 0x06	; 6
 4f6:	b8 f2       	brcs	.-82     	; 0x4a6 <__stack+0x47>
		decimal_part *= 10;
		int rem = (int)(decimal_part + 0.001);
		str[i++] = rem + '0';
		decimal_part -= rem;
	}
	for(unsigned char j = i - 1; j >= 0; j--)
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
 4fa:	81 0f       	add	r24, r17
	{
		if(str[j] == '0')
 4fc:	fe 01       	movw	r30, r28
 4fe:	e8 0f       	add	r30, r24
 500:	f1 1d       	adc	r31, r1
 502:	90 81       	ld	r25, Z
 504:	90 33       	cpi	r25, 0x30	; 48
 506:	19 f4       	brne	.+6      	; 0x50e <__stack+0xaf>
		str[j] = '\0';
 508:	10 82       	st	Z, r1
		decimal_part *= 10;
		int rem = (int)(decimal_part + 0.001);
		str[i++] = rem + '0';
		decimal_part -= rem;
	}
	for(unsigned char j = i - 1; j >= 0; j--)
 50a:	81 50       	subi	r24, 0x01	; 1
	{
		if(str[j] == '0')
		str[j] = '\0';
		else
		break;
	}
 50c:	f7 cf       	rjmp	.-18     	; 0x4fc <__stack+0x9d>
	str[i] = '\0';
 50e:	c1 0f       	add	r28, r17
 510:	d1 1d       	adc	r29, r1
 512:	18 82       	st	Y, r1
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	ff 90       	pop	r15
 51e:	bf 90       	pop	r11
 520:	af 90       	pop	r10
 522:	9f 90       	pop	r9
 524:	8f 90       	pop	r8
 526:	08 95       	ret

00000528 <clearCharArray>:
void clearCharArray(char* str) {
 528:	ac 01       	movw	r20, r24
	for(int i = 0; str[i] != '\0'; i++) {
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	03 c0       	rjmp	.+6      	; 0x536 <clearCharArray+0xe>
		str[i] = '\0';
 530:	10 82       	st	Z, r1
		break;
	}
	str[i] = '\0';
}
void clearCharArray(char* str) {
	for(int i = 0; str[i] != '\0'; i++) {
 532:	2f 5f       	subi	r18, 0xFF	; 255
 534:	3f 4f       	sbci	r19, 0xFF	; 255
 536:	fa 01       	movw	r30, r20
 538:	e2 0f       	add	r30, r18
 53a:	f3 1f       	adc	r31, r19
 53c:	90 81       	ld	r25, Z
 53e:	91 11       	cpse	r25, r1
 540:	f7 cf       	rjmp	.-18     	; 0x530 <clearCharArray+0x8>
		str[i] = '\0';
	}
}
 542:	08 95       	ret

00000544 <main>:
float temp;
char temp_str[10];
float wTemp = 24.1;
int main(void)
{	
	LCD_init();
 544:	0e 94 89 00 	call	0x112	; 0x112 <LCD_init>
	LED_CONTROL_DDR &= ~((1<<LED_R) | (1<<LED_G) | (1<<LED_Y));
 548:	84 b3       	in	r24, 0x14	; 20
 54a:	87 7c       	andi	r24, 0xC7	; 199
 54c:	84 bb       	out	0x14, r24	; 20

    while (1) 
    {
		temp = readTemp();
 54e:	0e 94 40 01 	call	0x280	; 0x280 <readTemp>
 552:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <__data_end>
 556:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <__data_end+0x1>
 55a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end+0x2>
 55e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x3>
		clearCharArray(temp_str);
 562:	80 e7       	ldi	r24, 0x70	; 112
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 94 02 	call	0x528	; 0x528 <clearCharArray>
		float_to_string(temp, temp_str);
 56a:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <__data_end>
 56e:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <__data_end+0x1>
 572:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end+0x2>
 576:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x3>
 57a:	40 e7       	ldi	r20, 0x70	; 112
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <float_to_string>
		LCD_clear();
 582:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_clear>
		LCD_print("Temp: ");
 586:	84 e6       	ldi	r24, 0x64	; 100
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_print>
		LCD_print(temp_str);
 58e:	80 e7       	ldi	r24, 0x70	; 112
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_print>
		handleLED(wTemp);
 596:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 59a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 59e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 5a2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 5a6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <handleLED>
 5aa:	d1 cf       	rjmp	.-94     	; 0x54e <main+0xa>

000005ac <__subsf3>:
 5ac:	50 58       	subi	r21, 0x80	; 128

000005ae <__addsf3>:
 5ae:	bb 27       	eor	r27, r27
 5b0:	aa 27       	eor	r26, r26
 5b2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__addsf3x>
 5b6:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_round>
 5ba:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fp_pscA>
 5be:	38 f0       	brcs	.+14     	; 0x5ce <__addsf3+0x20>
 5c0:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_pscB>
 5c4:	20 f0       	brcs	.+8      	; 0x5ce <__addsf3+0x20>
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <__addsf3+0x28>
 5c8:	9f 3f       	cpi	r25, 0xFF	; 255
 5ca:	19 f4       	brne	.+6      	; 0x5d2 <__addsf3+0x24>
 5cc:	26 f4       	brtc	.+8      	; 0x5d6 <__addsf3+0x28>
 5ce:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_nan>
 5d2:	0e f4       	brtc	.+2      	; 0x5d6 <__addsf3+0x28>
 5d4:	e0 95       	com	r30
 5d6:	e7 fb       	bst	r30, 7
 5d8:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_inf>

000005dc <__addsf3x>:
 5dc:	e9 2f       	mov	r30, r25
 5de:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_split3>
 5e2:	58 f3       	brcs	.-42     	; 0x5ba <__addsf3+0xc>
 5e4:	ba 17       	cp	r27, r26
 5e6:	62 07       	cpc	r22, r18
 5e8:	73 07       	cpc	r23, r19
 5ea:	84 07       	cpc	r24, r20
 5ec:	95 07       	cpc	r25, r21
 5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__addsf3x+0x1c>
 5f0:	79 f4       	brne	.+30     	; 0x610 <__addsf3x+0x34>
 5f2:	a6 f5       	brtc	.+104    	; 0x65c <__addsf3x+0x80>
 5f4:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_zero>
 5f8:	0e f4       	brtc	.+2      	; 0x5fc <__addsf3x+0x20>
 5fa:	e0 95       	com	r30
 5fc:	0b 2e       	mov	r0, r27
 5fe:	ba 2f       	mov	r27, r26
 600:	a0 2d       	mov	r26, r0
 602:	0b 01       	movw	r0, r22
 604:	b9 01       	movw	r22, r18
 606:	90 01       	movw	r18, r0
 608:	0c 01       	movw	r0, r24
 60a:	ca 01       	movw	r24, r20
 60c:	a0 01       	movw	r20, r0
 60e:	11 24       	eor	r1, r1
 610:	ff 27       	eor	r31, r31
 612:	59 1b       	sub	r21, r25
 614:	99 f0       	breq	.+38     	; 0x63c <__addsf3x+0x60>
 616:	59 3f       	cpi	r21, 0xF9	; 249
 618:	50 f4       	brcc	.+20     	; 0x62e <__addsf3x+0x52>
 61a:	50 3e       	cpi	r21, 0xE0	; 224
 61c:	68 f1       	brcs	.+90     	; 0x678 <__addsf3x+0x9c>
 61e:	1a 16       	cp	r1, r26
 620:	f0 40       	sbci	r31, 0x00	; 0
 622:	a2 2f       	mov	r26, r18
 624:	23 2f       	mov	r18, r19
 626:	34 2f       	mov	r19, r20
 628:	44 27       	eor	r20, r20
 62a:	58 5f       	subi	r21, 0xF8	; 248
 62c:	f3 cf       	rjmp	.-26     	; 0x614 <__addsf3x+0x38>
 62e:	46 95       	lsr	r20
 630:	37 95       	ror	r19
 632:	27 95       	ror	r18
 634:	a7 95       	ror	r26
 636:	f0 40       	sbci	r31, 0x00	; 0
 638:	53 95       	inc	r21
 63a:	c9 f7       	brne	.-14     	; 0x62e <__addsf3x+0x52>
 63c:	7e f4       	brtc	.+30     	; 0x65c <__addsf3x+0x80>
 63e:	1f 16       	cp	r1, r31
 640:	ba 0b       	sbc	r27, r26
 642:	62 0b       	sbc	r22, r18
 644:	73 0b       	sbc	r23, r19
 646:	84 0b       	sbc	r24, r20
 648:	ba f0       	brmi	.+46     	; 0x678 <__addsf3x+0x9c>
 64a:	91 50       	subi	r25, 0x01	; 1
 64c:	a1 f0       	breq	.+40     	; 0x676 <__addsf3x+0x9a>
 64e:	ff 0f       	add	r31, r31
 650:	bb 1f       	adc	r27, r27
 652:	66 1f       	adc	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	c2 f7       	brpl	.-16     	; 0x64a <__addsf3x+0x6e>
 65a:	0e c0       	rjmp	.+28     	; 0x678 <__addsf3x+0x9c>
 65c:	ba 0f       	add	r27, r26
 65e:	62 1f       	adc	r22, r18
 660:	73 1f       	adc	r23, r19
 662:	84 1f       	adc	r24, r20
 664:	48 f4       	brcc	.+18     	; 0x678 <__addsf3x+0x9c>
 666:	87 95       	ror	r24
 668:	77 95       	ror	r23
 66a:	67 95       	ror	r22
 66c:	b7 95       	ror	r27
 66e:	f7 95       	ror	r31
 670:	9e 3f       	cpi	r25, 0xFE	; 254
 672:	08 f0       	brcs	.+2      	; 0x676 <__addsf3x+0x9a>
 674:	b0 cf       	rjmp	.-160    	; 0x5d6 <__addsf3+0x28>
 676:	93 95       	inc	r25
 678:	88 0f       	add	r24, r24
 67a:	08 f0       	brcs	.+2      	; 0x67e <__addsf3x+0xa2>
 67c:	99 27       	eor	r25, r25
 67e:	ee 0f       	add	r30, r30
 680:	97 95       	ror	r25
 682:	87 95       	ror	r24
 684:	08 95       	ret

00000686 <__cmpsf2>:
 686:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_cmp>
 68a:	08 f4       	brcc	.+2      	; 0x68e <__cmpsf2+0x8>
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	08 95       	ret

00000690 <__fixsfsi>:
 690:	0e 94 4f 03 	call	0x69e	; 0x69e <__fixunssfsi>
 694:	68 94       	set
 696:	b1 11       	cpse	r27, r1
 698:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_szero>
 69c:	08 95       	ret

0000069e <__fixunssfsi>:
 69e:	0e 94 0f 04 	call	0x81e	; 0x81e <__fp_splitA>
 6a2:	88 f0       	brcs	.+34     	; 0x6c6 <__fixunssfsi+0x28>
 6a4:	9f 57       	subi	r25, 0x7F	; 127
 6a6:	98 f0       	brcs	.+38     	; 0x6ce <__fixunssfsi+0x30>
 6a8:	b9 2f       	mov	r27, r25
 6aa:	99 27       	eor	r25, r25
 6ac:	b7 51       	subi	r27, 0x17	; 23
 6ae:	b0 f0       	brcs	.+44     	; 0x6dc <__fixunssfsi+0x3e>
 6b0:	e1 f0       	breq	.+56     	; 0x6ea <__fixunssfsi+0x4c>
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	1a f0       	brmi	.+6      	; 0x6c2 <__fixunssfsi+0x24>
 6bc:	ba 95       	dec	r27
 6be:	c9 f7       	brne	.-14     	; 0x6b2 <__fixunssfsi+0x14>
 6c0:	14 c0       	rjmp	.+40     	; 0x6ea <__fixunssfsi+0x4c>
 6c2:	b1 30       	cpi	r27, 0x01	; 1
 6c4:	91 f0       	breq	.+36     	; 0x6ea <__fixunssfsi+0x4c>
 6c6:	0e 94 29 04 	call	0x852	; 0x852 <__fp_zero>
 6ca:	b1 e0       	ldi	r27, 0x01	; 1
 6cc:	08 95       	ret
 6ce:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_zero>
 6d2:	67 2f       	mov	r22, r23
 6d4:	78 2f       	mov	r23, r24
 6d6:	88 27       	eor	r24, r24
 6d8:	b8 5f       	subi	r27, 0xF8	; 248
 6da:	39 f0       	breq	.+14     	; 0x6ea <__fixunssfsi+0x4c>
 6dc:	b9 3f       	cpi	r27, 0xF9	; 249
 6de:	cc f3       	brlt	.-14     	; 0x6d2 <__fixunssfsi+0x34>
 6e0:	86 95       	lsr	r24
 6e2:	77 95       	ror	r23
 6e4:	67 95       	ror	r22
 6e6:	b3 95       	inc	r27
 6e8:	d9 f7       	brne	.-10     	; 0x6e0 <__fixunssfsi+0x42>
 6ea:	3e f4       	brtc	.+14     	; 0x6fa <__fixunssfsi+0x5c>
 6ec:	90 95       	com	r25
 6ee:	80 95       	com	r24
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	08 95       	ret

000006fc <__floatunsisf>:
 6fc:	e8 94       	clt
 6fe:	09 c0       	rjmp	.+18     	; 0x712 <__floatsisf+0x12>

00000700 <__floatsisf>:
 700:	97 fb       	bst	r25, 7
 702:	3e f4       	brtc	.+14     	; 0x712 <__floatsisf+0x12>
 704:	90 95       	com	r25
 706:	80 95       	com	r24
 708:	70 95       	com	r23
 70a:	61 95       	neg	r22
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
 70e:	8f 4f       	sbci	r24, 0xFF	; 255
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	99 23       	and	r25, r25
 714:	a9 f0       	breq	.+42     	; 0x740 <__floatsisf+0x40>
 716:	f9 2f       	mov	r31, r25
 718:	96 e9       	ldi	r25, 0x96	; 150
 71a:	bb 27       	eor	r27, r27
 71c:	93 95       	inc	r25
 71e:	f6 95       	lsr	r31
 720:	87 95       	ror	r24
 722:	77 95       	ror	r23
 724:	67 95       	ror	r22
 726:	b7 95       	ror	r27
 728:	f1 11       	cpse	r31, r1
 72a:	f8 cf       	rjmp	.-16     	; 0x71c <__floatsisf+0x1c>
 72c:	fa f4       	brpl	.+62     	; 0x76c <__floatsisf+0x6c>
 72e:	bb 0f       	add	r27, r27
 730:	11 f4       	brne	.+4      	; 0x736 <__floatsisf+0x36>
 732:	60 ff       	sbrs	r22, 0
 734:	1b c0       	rjmp	.+54     	; 0x76c <__floatsisf+0x6c>
 736:	6f 5f       	subi	r22, 0xFF	; 255
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	8f 4f       	sbci	r24, 0xFF	; 255
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	16 c0       	rjmp	.+44     	; 0x76c <__floatsisf+0x6c>
 740:	88 23       	and	r24, r24
 742:	11 f0       	breq	.+4      	; 0x748 <__floatsisf+0x48>
 744:	96 e9       	ldi	r25, 0x96	; 150
 746:	11 c0       	rjmp	.+34     	; 0x76a <__floatsisf+0x6a>
 748:	77 23       	and	r23, r23
 74a:	21 f0       	breq	.+8      	; 0x754 <__floatsisf+0x54>
 74c:	9e e8       	ldi	r25, 0x8E	; 142
 74e:	87 2f       	mov	r24, r23
 750:	76 2f       	mov	r23, r22
 752:	05 c0       	rjmp	.+10     	; 0x75e <__floatsisf+0x5e>
 754:	66 23       	and	r22, r22
 756:	71 f0       	breq	.+28     	; 0x774 <__floatsisf+0x74>
 758:	96 e8       	ldi	r25, 0x86	; 134
 75a:	86 2f       	mov	r24, r22
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	2a f0       	brmi	.+10     	; 0x76c <__floatsisf+0x6c>
 762:	9a 95       	dec	r25
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	da f7       	brpl	.-10     	; 0x762 <__floatsisf+0x62>
 76c:	88 0f       	add	r24, r24
 76e:	96 95       	lsr	r25
 770:	87 95       	ror	r24
 772:	97 f9       	bld	r25, 7
 774:	08 95       	ret

00000776 <__fp_cmp>:
 776:	99 0f       	add	r25, r25
 778:	00 08       	sbc	r0, r0
 77a:	55 0f       	add	r21, r21
 77c:	aa 0b       	sbc	r26, r26
 77e:	e0 e8       	ldi	r30, 0x80	; 128
 780:	fe ef       	ldi	r31, 0xFE	; 254
 782:	16 16       	cp	r1, r22
 784:	17 06       	cpc	r1, r23
 786:	e8 07       	cpc	r30, r24
 788:	f9 07       	cpc	r31, r25
 78a:	c0 f0       	brcs	.+48     	; 0x7bc <__fp_cmp+0x46>
 78c:	12 16       	cp	r1, r18
 78e:	13 06       	cpc	r1, r19
 790:	e4 07       	cpc	r30, r20
 792:	f5 07       	cpc	r31, r21
 794:	98 f0       	brcs	.+38     	; 0x7bc <__fp_cmp+0x46>
 796:	62 1b       	sub	r22, r18
 798:	73 0b       	sbc	r23, r19
 79a:	84 0b       	sbc	r24, r20
 79c:	95 0b       	sbc	r25, r21
 79e:	39 f4       	brne	.+14     	; 0x7ae <__fp_cmp+0x38>
 7a0:	0a 26       	eor	r0, r26
 7a2:	61 f0       	breq	.+24     	; 0x7bc <__fp_cmp+0x46>
 7a4:	23 2b       	or	r18, r19
 7a6:	24 2b       	or	r18, r20
 7a8:	25 2b       	or	r18, r21
 7aa:	21 f4       	brne	.+8      	; 0x7b4 <__fp_cmp+0x3e>
 7ac:	08 95       	ret
 7ae:	0a 26       	eor	r0, r26
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <__fp_cmp+0x3e>
 7b2:	a1 40       	sbci	r26, 0x01	; 1
 7b4:	a6 95       	lsr	r26
 7b6:	8f ef       	ldi	r24, 0xFF	; 255
 7b8:	81 1d       	adc	r24, r1
 7ba:	81 1d       	adc	r24, r1
 7bc:	08 95       	ret

000007be <__fp_inf>:
 7be:	97 f9       	bld	r25, 7
 7c0:	9f 67       	ori	r25, 0x7F	; 127
 7c2:	80 e8       	ldi	r24, 0x80	; 128
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	08 95       	ret

000007ca <__fp_nan>:
 7ca:	9f ef       	ldi	r25, 0xFF	; 255
 7cc:	80 ec       	ldi	r24, 0xC0	; 192
 7ce:	08 95       	ret

000007d0 <__fp_pscA>:
 7d0:	00 24       	eor	r0, r0
 7d2:	0a 94       	dec	r0
 7d4:	16 16       	cp	r1, r22
 7d6:	17 06       	cpc	r1, r23
 7d8:	18 06       	cpc	r1, r24
 7da:	09 06       	cpc	r0, r25
 7dc:	08 95       	ret

000007de <__fp_pscB>:
 7de:	00 24       	eor	r0, r0
 7e0:	0a 94       	dec	r0
 7e2:	12 16       	cp	r1, r18
 7e4:	13 06       	cpc	r1, r19
 7e6:	14 06       	cpc	r1, r20
 7e8:	05 06       	cpc	r0, r21
 7ea:	08 95       	ret

000007ec <__fp_round>:
 7ec:	09 2e       	mov	r0, r25
 7ee:	03 94       	inc	r0
 7f0:	00 0c       	add	r0, r0
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <__fp_round+0xc>
 7f4:	88 23       	and	r24, r24
 7f6:	52 f0       	brmi	.+20     	; 0x80c <__fp_round+0x20>
 7f8:	bb 0f       	add	r27, r27
 7fa:	40 f4       	brcc	.+16     	; 0x80c <__fp_round+0x20>
 7fc:	bf 2b       	or	r27, r31
 7fe:	11 f4       	brne	.+4      	; 0x804 <__fp_round+0x18>
 800:	60 ff       	sbrs	r22, 0
 802:	04 c0       	rjmp	.+8      	; 0x80c <__fp_round+0x20>
 804:	6f 5f       	subi	r22, 0xFF	; 255
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	08 95       	ret

0000080e <__fp_split3>:
 80e:	57 fd       	sbrc	r21, 7
 810:	90 58       	subi	r25, 0x80	; 128
 812:	44 0f       	add	r20, r20
 814:	55 1f       	adc	r21, r21
 816:	59 f0       	breq	.+22     	; 0x82e <__fp_splitA+0x10>
 818:	5f 3f       	cpi	r21, 0xFF	; 255
 81a:	71 f0       	breq	.+28     	; 0x838 <__fp_splitA+0x1a>
 81c:	47 95       	ror	r20

0000081e <__fp_splitA>:
 81e:	88 0f       	add	r24, r24
 820:	97 fb       	bst	r25, 7
 822:	99 1f       	adc	r25, r25
 824:	61 f0       	breq	.+24     	; 0x83e <__fp_splitA+0x20>
 826:	9f 3f       	cpi	r25, 0xFF	; 255
 828:	79 f0       	breq	.+30     	; 0x848 <__fp_splitA+0x2a>
 82a:	87 95       	ror	r24
 82c:	08 95       	ret
 82e:	12 16       	cp	r1, r18
 830:	13 06       	cpc	r1, r19
 832:	14 06       	cpc	r1, r20
 834:	55 1f       	adc	r21, r21
 836:	f2 cf       	rjmp	.-28     	; 0x81c <__fp_split3+0xe>
 838:	46 95       	lsr	r20
 83a:	f1 df       	rcall	.-30     	; 0x81e <__fp_splitA>
 83c:	08 c0       	rjmp	.+16     	; 0x84e <__fp_splitA+0x30>
 83e:	16 16       	cp	r1, r22
 840:	17 06       	cpc	r1, r23
 842:	18 06       	cpc	r1, r24
 844:	99 1f       	adc	r25, r25
 846:	f1 cf       	rjmp	.-30     	; 0x82a <__fp_splitA+0xc>
 848:	86 95       	lsr	r24
 84a:	71 05       	cpc	r23, r1
 84c:	61 05       	cpc	r22, r1
 84e:	08 94       	sec
 850:	08 95       	ret

00000852 <__fp_zero>:
 852:	e8 94       	clt

00000854 <__fp_szero>:
 854:	bb 27       	eor	r27, r27
 856:	66 27       	eor	r22, r22
 858:	77 27       	eor	r23, r23
 85a:	cb 01       	movw	r24, r22
 85c:	97 f9       	bld	r25, 7
 85e:	08 95       	ret

00000860 <__gesf2>:
 860:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_cmp>
 864:	08 f4       	brcc	.+2      	; 0x868 <__gesf2+0x8>
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	08 95       	ret

0000086a <__mulsf3>:
 86a:	0e 94 48 04 	call	0x890	; 0x890 <__mulsf3x>
 86e:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_round>
 872:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fp_pscA>
 876:	38 f0       	brcs	.+14     	; 0x886 <__mulsf3+0x1c>
 878:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_pscB>
 87c:	20 f0       	brcs	.+8      	; 0x886 <__mulsf3+0x1c>
 87e:	95 23       	and	r25, r21
 880:	11 f0       	breq	.+4      	; 0x886 <__mulsf3+0x1c>
 882:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_inf>
 886:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_nan>
 88a:	11 24       	eor	r1, r1
 88c:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_szero>

00000890 <__mulsf3x>:
 890:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_split3>
 894:	70 f3       	brcs	.-36     	; 0x872 <__mulsf3+0x8>

00000896 <__mulsf3_pse>:
 896:	95 9f       	mul	r25, r21
 898:	c1 f3       	breq	.-16     	; 0x88a <__mulsf3+0x20>
 89a:	95 0f       	add	r25, r21
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	55 1f       	adc	r21, r21
 8a0:	62 9f       	mul	r22, r18
 8a2:	f0 01       	movw	r30, r0
 8a4:	72 9f       	mul	r23, r18
 8a6:	bb 27       	eor	r27, r27
 8a8:	f0 0d       	add	r31, r0
 8aa:	b1 1d       	adc	r27, r1
 8ac:	63 9f       	mul	r22, r19
 8ae:	aa 27       	eor	r26, r26
 8b0:	f0 0d       	add	r31, r0
 8b2:	b1 1d       	adc	r27, r1
 8b4:	aa 1f       	adc	r26, r26
 8b6:	64 9f       	mul	r22, r20
 8b8:	66 27       	eor	r22, r22
 8ba:	b0 0d       	add	r27, r0
 8bc:	a1 1d       	adc	r26, r1
 8be:	66 1f       	adc	r22, r22
 8c0:	82 9f       	mul	r24, r18
 8c2:	22 27       	eor	r18, r18
 8c4:	b0 0d       	add	r27, r0
 8c6:	a1 1d       	adc	r26, r1
 8c8:	62 1f       	adc	r22, r18
 8ca:	73 9f       	mul	r23, r19
 8cc:	b0 0d       	add	r27, r0
 8ce:	a1 1d       	adc	r26, r1
 8d0:	62 1f       	adc	r22, r18
 8d2:	83 9f       	mul	r24, r19
 8d4:	a0 0d       	add	r26, r0
 8d6:	61 1d       	adc	r22, r1
 8d8:	22 1f       	adc	r18, r18
 8da:	74 9f       	mul	r23, r20
 8dc:	33 27       	eor	r19, r19
 8de:	a0 0d       	add	r26, r0
 8e0:	61 1d       	adc	r22, r1
 8e2:	23 1f       	adc	r18, r19
 8e4:	84 9f       	mul	r24, r20
 8e6:	60 0d       	add	r22, r0
 8e8:	21 1d       	adc	r18, r1
 8ea:	82 2f       	mov	r24, r18
 8ec:	76 2f       	mov	r23, r22
 8ee:	6a 2f       	mov	r22, r26
 8f0:	11 24       	eor	r1, r1
 8f2:	9f 57       	subi	r25, 0x7F	; 127
 8f4:	50 40       	sbci	r21, 0x00	; 0
 8f6:	9a f0       	brmi	.+38     	; 0x91e <__mulsf3_pse+0x88>
 8f8:	f1 f0       	breq	.+60     	; 0x936 <__mulsf3_pse+0xa0>
 8fa:	88 23       	and	r24, r24
 8fc:	4a f0       	brmi	.+18     	; 0x910 <__mulsf3_pse+0x7a>
 8fe:	ee 0f       	add	r30, r30
 900:	ff 1f       	adc	r31, r31
 902:	bb 1f       	adc	r27, r27
 904:	66 1f       	adc	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	91 50       	subi	r25, 0x01	; 1
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	a9 f7       	brne	.-22     	; 0x8fa <__mulsf3_pse+0x64>
 910:	9e 3f       	cpi	r25, 0xFE	; 254
 912:	51 05       	cpc	r21, r1
 914:	80 f0       	brcs	.+32     	; 0x936 <__mulsf3_pse+0xa0>
 916:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_inf>
 91a:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_szero>
 91e:	5f 3f       	cpi	r21, 0xFF	; 255
 920:	e4 f3       	brlt	.-8      	; 0x91a <__mulsf3_pse+0x84>
 922:	98 3e       	cpi	r25, 0xE8	; 232
 924:	d4 f3       	brlt	.-12     	; 0x91a <__mulsf3_pse+0x84>
 926:	86 95       	lsr	r24
 928:	77 95       	ror	r23
 92a:	67 95       	ror	r22
 92c:	b7 95       	ror	r27
 92e:	f7 95       	ror	r31
 930:	e7 95       	ror	r30
 932:	9f 5f       	subi	r25, 0xFF	; 255
 934:	c1 f7       	brne	.-16     	; 0x926 <__mulsf3_pse+0x90>
 936:	fe 2b       	or	r31, r30
 938:	88 0f       	add	r24, r24
 93a:	91 1d       	adc	r25, r1
 93c:	96 95       	lsr	r25
 93e:	87 95       	ror	r24
 940:	97 f9       	bld	r25, 7
 942:	08 95       	ret

00000944 <__udivmodsi4>:
 944:	a1 e2       	ldi	r26, 0x21	; 33
 946:	1a 2e       	mov	r1, r26
 948:	aa 1b       	sub	r26, r26
 94a:	bb 1b       	sub	r27, r27
 94c:	fd 01       	movw	r30, r26
 94e:	0d c0       	rjmp	.+26     	; 0x96a <__udivmodsi4_ep>

00000950 <__udivmodsi4_loop>:
 950:	aa 1f       	adc	r26, r26
 952:	bb 1f       	adc	r27, r27
 954:	ee 1f       	adc	r30, r30
 956:	ff 1f       	adc	r31, r31
 958:	a2 17       	cp	r26, r18
 95a:	b3 07       	cpc	r27, r19
 95c:	e4 07       	cpc	r30, r20
 95e:	f5 07       	cpc	r31, r21
 960:	20 f0       	brcs	.+8      	; 0x96a <__udivmodsi4_ep>
 962:	a2 1b       	sub	r26, r18
 964:	b3 0b       	sbc	r27, r19
 966:	e4 0b       	sbc	r30, r20
 968:	f5 0b       	sbc	r31, r21

0000096a <__udivmodsi4_ep>:
 96a:	66 1f       	adc	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	1a 94       	dec	r1
 974:	69 f7       	brne	.-38     	; 0x950 <__udivmodsi4_loop>
 976:	60 95       	com	r22
 978:	70 95       	com	r23
 97a:	80 95       	com	r24
 97c:	90 95       	com	r25
 97e:	9b 01       	movw	r18, r22
 980:	ac 01       	movw	r20, r24
 982:	bd 01       	movw	r22, r26
 984:	cf 01       	movw	r24, r30
 986:	08 95       	ret

00000988 <_exit>:
 988:	f8 94       	cli

0000098a <__stop_program>:
 98a:	ff cf       	rjmp	.-2      	; 0x98a <__stop_program>
