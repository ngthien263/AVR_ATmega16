
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000004d6  0000054a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000146a  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aa2  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000acc  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000025c  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ca  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f16  00000000  00000000  000037ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  000046e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
  7a:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_command>:
	unsigned char address;
	if(y != 1)
	address = 0xC0 + x - 1;
	else
	address = 0x80 + x - 1;
	LCD_command(address);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9e 7f       	andi	r25, 0xFE	; 254
  86:	92 bb       	out	0x12, r25	; 18
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	9d 7f       	andi	r25, 0xFD	; 253
  8c:	92 bb       	out	0x12, r25	; 18
  8e:	ef ec       	ldi	r30, 0xCF	; 207
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_command+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCD_command+0x16>
  98:	00 00       	nop
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	8f ec       	ldi	r24, 0xCF	; 207
  a4:	97 e0       	ldi	r25, 0x07	; 7
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_command+0x24>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_command+0x2a>
  ac:	00 00       	nop
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	ef e6       	ldi	r30, 0x6F	; 111
  b6:	f7 e1       	ldi	r31, 0x17	; 23
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_command+0x36>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_command+0x3c>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <LCD_data>:
  c2:	92 b3       	in	r25, 0x12	; 18
  c4:	91 60       	ori	r25, 0x01	; 1
  c6:	92 bb       	out	0x12, r25	; 18
  c8:	92 b3       	in	r25, 0x12	; 18
  ca:	9d 7f       	andi	r25, 0xFD	; 253
  cc:	92 bb       	out	0x12, r25	; 18
  ce:	ef ec       	ldi	r30, 0xCF	; 207
  d0:	f7 e0       	ldi	r31, 0x07	; 7
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_data+0x10>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_data+0x16>
  d8:	00 00       	nop
  da:	85 bb       	out	0x15, r24	; 21
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	82 bb       	out	0x12, r24	; 18
  e2:	8f ec       	ldi	r24, 0xCF	; 207
  e4:	97 e0       	ldi	r25, 0x07	; 7
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_data+0x24>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_data+0x2a>
  ec:	00 00       	nop
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	8b 7f       	andi	r24, 0xFB	; 251
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	ef ec       	ldi	r30, 0xCF	; 207
  f6:	f7 e0       	ldi	r31, 0x07	; 7
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_data+0x36>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_data+0x3c>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <LCD_init>:
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	84 bb       	out	0x14, r24	; 20
 106:	81 b3       	in	r24, 0x11	; 17
 108:	87 60       	ori	r24, 0x07	; 7
 10a:	81 bb       	out	0x11, r24	; 17
 10c:	8f ec       	ldi	r24, 0xCF	; 207
 10e:	97 e0       	ldi	r25, 0x07	; 7
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <LCD_init+0xe>
 114:	00 c0       	rjmp	.+0      	; 0x116 <LCD_init+0x14>
 116:	00 00       	nop
 118:	88 e3       	ldi	r24, 0x38	; 56
 11a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 124:	8f ec       	ldi	r24, 0xCF	; 207
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_init+0x26>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_init+0x2c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <LCD_clear>:
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_clear+0xa>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_clear+0x10>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <LCD_print>:
}

void LCD_print(const char *str) {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	while(*str) {
 14c:	03 c0       	rjmp	.+6      	; 0x154 <LCD_print+0xe>
		LCD_data(*str++);
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_data>
	address = 0x80 + x - 1;
	LCD_command(address);
}

void LCD_print(const char *str) {
	while(*str) {
 154:	88 81       	ld	r24, Y
 156:	81 11       	cpse	r24, r1
 158:	fa cf       	rjmp	.-12     	; 0x14e <LCD_print+0x8>
		LCD_data(*str++);
	}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <reset>:
#include "DS18B20.h"
#include <mystr.h>
uint8_t reset()
{
	uint8_t re;
	DDRA |= (1<<WIRE_PIN);
 160:	8a b3       	in	r24, 0x1a	; 26
 162:	81 60       	ori	r24, 0x01	; 1
 164:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1<<WIRE_PIN);
 166:	8b b3       	in	r24, 0x1b	; 27
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	8f eb       	ldi	r24, 0xBF	; 191
 16e:	93 e0       	ldi	r25, 0x03	; 3
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <reset+0x10>
 174:	00 c0       	rjmp	.+0      	; 0x176 <reset+0x16>
 176:	00 00       	nop
	_delay_us(480);
	DDRA &= ~(1<<WIRE_PIN);
 178:	8a b3       	in	r24, 0x1a	; 26
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	8a bb       	out	0x1a, r24	; 26
 17e:	9a eb       	ldi	r25, 0xBA	; 186
 180:	9a 95       	dec	r25
 182:	f1 f7       	brne	.-4      	; 0x180 <reset+0x20>
 184:	00 c0       	rjmp	.+0      	; 0x186 <reset+0x26>
	_delay_us(70);
	re = PINA & (1<<WIRE_PIN);
 186:	89 b3       	in	r24, 0x19	; 25
 188:	81 70       	andi	r24, 0x01	; 1
 18a:	e7 e4       	ldi	r30, 0x47	; 71
 18c:	f3 e0       	ldi	r31, 0x03	; 3
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <reset+0x2e>
 192:	00 c0       	rjmp	.+0      	; 0x194 <reset+0x34>
 194:	00 00       	nop
	_delay_us(420);
	return re;
}
 196:	08 95       	ret

00000198 <write1>:

void write1()
{
	DDRA |= (1<<WIRE_PIN);
 198:	8a b3       	in	r24, 0x1a	; 26
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1<<WIRE_PIN);
 19e:	8b b3       	in	r24, 0x1b	; 27
 1a0:	8e 7f       	andi	r24, 0xFE	; 254
 1a2:	8b bb       	out	0x1b, r24	; 27
 1a4:	80 e1       	ldi	r24, 0x10	; 16
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <write1+0xe>
	_delay_us(6);
	DDRA &= ~(1<<WIRE_PIN);
 1aa:	8a b3       	in	r24, 0x1a	; 26
 1ac:	8e 7f       	andi	r24, 0xFE	; 254
 1ae:	8a bb       	out	0x1a, r24	; 26
 1b0:	8a ea       	ldi	r24, 0xAA	; 170
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <write1+0x1a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <write1+0x20>
 1b8:	08 95       	ret

000001ba <write0>:
	_delay_us(64);
}

void write0()
{
	DDRA |= (1<<WIRE_PIN);
 1ba:	8a b3       	in	r24, 0x1a	; 26
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1<<WIRE_PIN);
 1c0:	8b b3       	in	r24, 0x1b	; 27
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	8b bb       	out	0x1b, r24	; 27
 1c6:	80 ea       	ldi	r24, 0xA0	; 160
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <write0+0xe>
	_delay_us(60);
	DDRA &= ~(1<<WIRE_PIN);
 1cc:	8a b3       	in	r24, 0x1a	; 26
 1ce:	8e 7f       	andi	r24, 0xFE	; 254
 1d0:	8a bb       	out	0x1a, r24	; 26
 1d2:	8a e1       	ldi	r24, 0x1A	; 26
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <write0+0x1a>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <write0+0x20>
 1da:	08 95       	ret

000001dc <writebit>:
	_delay_us(10);
}

void writebit(unsigned char bit)
{
	if(bit==1)
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	19 f4       	brne	.+6      	; 0x1e6 <writebit+0xa>
		write1();
 1e0:	0e 94 cc 00 	call	0x198	; 0x198 <write1>
 1e4:	08 95       	ret
	else
		write0();
 1e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <write0>
 1ea:	08 95       	ret

000001ec <readbit>:
}

uint8_t readbit()
{
	uint8_t res;
	DDRA |= (1<<WIRE_PIN);
 1ec:	8a b3       	in	r24, 0x1a	; 26
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1<<WIRE_PIN);
 1f2:	8b b3       	in	r24, 0x1b	; 27
 1f4:	8e 7f       	andi	r24, 0xFE	; 254
 1f6:	8b bb       	out	0x1b, r24	; 27
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <readbit+0xe>
	_delay_us(6);
	DDRA &= ~(1<<WIRE_PIN);
 1fe:	8a b3       	in	r24, 0x1a	; 26
 200:	8e 7f       	andi	r24, 0xFE	; 254
 202:	8a bb       	out	0x1a, r24	; 26
 204:	98 e1       	ldi	r25, 0x18	; 24
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
	_delay_us(9);
	res = PINA & (1<<WIRE_PIN);
 20a:	89 b3       	in	r24, 0x19	; 25
 20c:	81 70       	andi	r24, 0x01	; 1
 20e:	92 e9       	ldi	r25, 0x92	; 146
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 214:	00 c0       	rjmp	.+0      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
	_delay_us(55);
	return res;
}
 216:	08 95       	ret

00000218 <writebyte>:

void writebyte(unsigned char byte)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	d8 2f       	mov	r29, r24
	unsigned char i;
	for(i = 0; i < 8; i++)
 21e:	c0 e0       	ldi	r28, 0x00	; 0
 220:	0c c0       	rjmp	.+24     	; 0x23a <writebyte+0x22>
	{
		writebit((byte>>i) & 0x01);
 222:	8d 2f       	mov	r24, r29
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0c 2e       	mov	r0, r28
 228:	02 c0       	rjmp	.+4      	; 0x22e <writebyte+0x16>
 22a:	95 95       	asr	r25
 22c:	87 95       	ror	r24
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <writebyte+0x12>
 232:	81 70       	andi	r24, 0x01	; 1
 234:	0e 94 ee 00 	call	0x1dc	; 0x1dc <writebit>
}

void writebyte(unsigned char byte)
{
	unsigned char i;
	for(i = 0; i < 8; i++)
 238:	cf 5f       	subi	r28, 0xFF	; 255
 23a:	c8 30       	cpi	r28, 0x08	; 8
 23c:	90 f3       	brcs	.-28     	; 0x222 <writebyte+0xa>
	{
		writebit((byte>>i) & 0x01);
	}
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <readbyte>:

uint8_t readbyte()
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
	unsigned char i;
	uint8_t n=0;
 248:	d0 e0       	ldi	r29, 0x00	; 0
	for(i = 0; i < 8; i++)
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	0b c0       	rjmp	.+22     	; 0x264 <readbyte+0x20>
	{
		n |= (readbit()<<i);
 24e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <readbit>
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0c 2e       	mov	r0, r28
 256:	02 c0       	rjmp	.+4      	; 0x25c <readbyte+0x18>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <readbyte+0x14>
 260:	d8 2b       	or	r29, r24

uint8_t readbyte()
{
	unsigned char i;
	uint8_t n=0;
	for(i = 0; i < 8; i++)
 262:	cf 5f       	subi	r28, 0xFF	; 255
 264:	c8 30       	cpi	r28, 0x08	; 8
 266:	98 f3       	brcs	.-26     	; 0x24e <readbyte+0xa>
	{
		n |= (readbit()<<i);
	}
	return n;
}
 268:	8d 2f       	mov	r24, r29
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <readTemp>:

int readTemp()
{
 270:	cf 93       	push	r28
	unsigned char iTempL;
	unsigned char iTempH;
	float ftemp = 0;
	reset();
 272:	0e 94 b0 00 	call	0x160	; 0x160 <reset>
	writebyte(SKIPROM);
 276:	8c ec       	ldi	r24, 0xCC	; 204
 278:	0e 94 0c 01 	call	0x218	; 0x218 <writebyte>
	writebyte(CONVERT_T);
 27c:	84 e4       	ldi	r24, 0x44	; 68
 27e:	0e 94 0c 01 	call	0x218	; 0x218 <writebyte>
	while(!readbit());
 282:	0e 94 f6 00 	call	0x1ec	; 0x1ec <readbit>
 286:	88 23       	and	r24, r24
 288:	e1 f3       	breq	.-8      	; 0x282 <readTemp+0x12>
	reset();
 28a:	0e 94 b0 00 	call	0x160	; 0x160 <reset>
	writebyte(SKIPROM);
 28e:	8c ec       	ldi	r24, 0xCC	; 204
 290:	0e 94 0c 01 	call	0x218	; 0x218 <writebyte>
	writebyte(RSCRATCHPAD);
 294:	8e eb       	ldi	r24, 0xBE	; 190
 296:	0e 94 0c 01 	call	0x218	; 0x218 <writebyte>
	
	iTempL = readbyte();
 29a:	0e 94 22 01 	call	0x244	; 0x244 <readbyte>
 29e:	c8 2f       	mov	r28, r24
	iTempH = readbyte() ;
 2a0:	0e 94 22 01 	call	0x244	; 0x244 <readbyte>
	int temp = (iTempH << 8) | iTempL;
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	98 2f       	mov	r25, r24
 2a8:	88 27       	eor	r24, r24
	return temp;
}
 2aa:	8c 2b       	or	r24, r28
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <int_part>:

void int_part(char* intp_str)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
	uint8_t intp = readTemp()>>4;
 2b6:	0e 94 38 01 	call	0x270	; 0x270 <readTemp>
 2ba:	95 95       	asr	r25
 2bc:	87 95       	ror	r24
 2be:	95 95       	asr	r25
 2c0:	87 95       	ror	r24
 2c2:	95 95       	asr	r25
 2c4:	87 95       	ror	r24
 2c6:	95 95       	asr	r25
 2c8:	87 95       	ror	r24
	int_to_string(intp, intp_str);
 2ca:	68 2f       	mov	r22, r24
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	ae 01       	movw	r20, r28
 2d4:	0e 94 b3 01 	call	0x366	; 0x366 <int_to_string>
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <decimal_part>:

void decimal_part(char* dcmp_str)
{
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
	uint8_t dcmp = readTemp() & 0x000F;
 2e4:	0e 94 38 01 	call	0x270	; 0x270 <readTemp>
 2e8:	8f 70       	andi	r24, 0x0F	; 15
	dcmp = dcmp * 10/16;
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	9c 01       	movw	r18, r24
 2ee:	22 0f       	add	r18, r18
 2f0:	33 1f       	adc	r19, r19
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	82 0f       	add	r24, r18
 300:	93 1f       	adc	r25, r19
 302:	bc 01       	movw	r22, r24
 304:	99 23       	and	r25, r25
 306:	14 f4       	brge	.+4      	; 0x30c <decimal_part+0x2e>
 308:	61 5f       	subi	r22, 0xF1	; 241
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	75 95       	asr	r23
 30e:	67 95       	ror	r22
 310:	75 95       	asr	r23
 312:	67 95       	ror	r22
 314:	75 95       	asr	r23
 316:	67 95       	ror	r22
 318:	75 95       	asr	r23
 31a:	67 95       	ror	r22
	int_to_string(dcmp, dcmp_str);
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	ae 01       	movw	r20, r28
 324:	0e 94 b3 01 	call	0x366	; 0x366 <int_to_string>
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <reverse>:
	{
		result = -result;
	}
	return result;
}
void reverse(char* str) {
 32e:	ac 01       	movw	r20, r24
	unsigned char start = 0;
	unsigned char end1 = 0;
 330:	90 e0       	ldi	r25, 0x00	; 0
	while(str[end1] != '\0')
 332:	01 c0       	rjmp	.+2      	; 0x336 <reverse+0x8>
	{
		end1++;
 334:	9f 5f       	subi	r25, 0xFF	; 255
	return result;
}
void reverse(char* str) {
	unsigned char start = 0;
	unsigned char end1 = 0;
	while(str[end1] != '\0')
 336:	fa 01       	movw	r30, r20
 338:	e9 0f       	add	r30, r25
 33a:	f1 1d       	adc	r31, r1
 33c:	80 81       	ld	r24, Z
 33e:	81 11       	cpse	r24, r1
 340:	f9 cf       	rjmp	.-14     	; 0x334 <reverse+0x6>
	{
		end1++;
	}
	end1--;
 342:	91 50       	subi	r25, 0x01	; 1
		result = -result;
	}
	return result;
}
void reverse(char* str) {
	unsigned char start = 0;
 344:	20 e0       	ldi	r18, 0x00	; 0
	while(str[end1] != '\0')
	{
		end1++;
	}
	end1--;
	while (start<end1) {
 346:	0c c0       	rjmp	.+24     	; 0x360 <reverse+0x32>
		char temp = str[start];
 348:	da 01       	movw	r26, r20
 34a:	a2 0f       	add	r26, r18
 34c:	b1 1d       	adc	r27, r1
 34e:	8c 91       	ld	r24, X
		str[start] = str[end1];
 350:	fa 01       	movw	r30, r20
 352:	e9 0f       	add	r30, r25
 354:	f1 1d       	adc	r31, r1
 356:	30 81       	ld	r19, Z
 358:	3c 93       	st	X, r19
		str[end1] = temp;
 35a:	80 83       	st	Z, r24
		start++;
 35c:	2f 5f       	subi	r18, 0xFF	; 255
		end1--;
 35e:	91 50       	subi	r25, 0x01	; 1
	while(str[end1] != '\0')
	{
		end1++;
	}
	end1--;
	while (start<end1) {
 360:	29 17       	cp	r18, r25
 362:	90 f3       	brcs	.-28     	; 0x348 <reverse+0x1a>
		str[start] = str[end1];
		str[end1] = temp;
		start++;
		end1--;
	}
}
 364:	08 95       	ret

00000366 <int_to_string>:
void int_to_string(int32_t num, char *str)
{
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ea 01       	movw	r28, r20
	int isNegative = 0;
	unsigned char i = 0;
	if(num < 0)
 372:	99 23       	and	r25, r25
 374:	54 f4       	brge	.+20     	; 0x38a <int_to_string+0x24>
	{
		isNegative = 1;
		num = -num;
 376:	90 95       	com	r25
 378:	80 95       	com	r24
 37a:	70 95       	com	r23
 37c:	61 95       	neg	r22
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	8f 4f       	sbci	r24, 0xFF	; 255
 382:	9f 4f       	sbci	r25, 0xFF	; 255
{
	int isNegative = 0;
	unsigned char i = 0;
	if(num < 0)
	{
		isNegative = 1;
 384:	01 e0       	ldi	r16, 0x01	; 1
 386:	10 e0       	ldi	r17, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <int_to_string+0x28>
		end1--;
	}
}
void int_to_string(int32_t num, char *str)
{
	int isNegative = 0;
 38a:	00 e0       	ldi	r16, 0x00	; 0
 38c:	10 e0       	ldi	r17, 0x00	; 0
	if(num < 0)
	{
		isNegative = 1;
		num = -num;
	}
	if(num == 0)
 38e:	61 15       	cp	r22, r1
 390:	71 05       	cpc	r23, r1
 392:	81 05       	cpc	r24, r1
 394:	91 05       	cpc	r25, r1
 396:	b1 f4       	brne	.+44     	; 0x3c4 <int_to_string+0x5e>
	{
		str[i++] = '0';
 398:	80 e3       	ldi	r24, 0x30	; 48
 39a:	88 83       	st	Y, r24
 39c:	ff 24       	eor	r15, r15
 39e:	f3 94       	inc	r15
 3a0:	17 c0       	rjmp	.+46     	; 0x3d0 <int_to_string+0x6a>
	}
	else
	{
		while (num != 0)
		{
			int32_t rem = (int32_t)num % 10;
 3a2:	2a e0       	ldi	r18, 0x0A	; 10
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	0e 94 4a 02 	call	0x494	; 0x494 <__divmodsi4>
			str[i++] = rem + '0';
 3ae:	fe 01       	movw	r30, r28
 3b0:	ef 0d       	add	r30, r15
 3b2:	f1 1d       	adc	r31, r1
 3b4:	60 5d       	subi	r22, 0xD0	; 208
 3b6:	60 83       	st	Z, r22
			num = num / 10;
 3b8:	62 2f       	mov	r22, r18
 3ba:	73 2f       	mov	r23, r19
 3bc:	84 2f       	mov	r24, r20
 3be:	95 2f       	mov	r25, r21
	else
	{
		while (num != 0)
		{
			int32_t rem = (int32_t)num % 10;
			str[i++] = rem + '0';
 3c0:	f3 94       	inc	r15
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <int_to_string+0x60>
 3c4:	f1 2c       	mov	r15, r1
	{
		str[i++] = '0';
	}
	else
	{
		while (num != 0)
 3c6:	61 15       	cp	r22, r1
 3c8:	71 05       	cpc	r23, r1
 3ca:	81 05       	cpc	r24, r1
 3cc:	91 05       	cpc	r25, r1
 3ce:	49 f7       	brne	.-46     	; 0x3a2 <int_to_string+0x3c>
			int32_t rem = (int32_t)num % 10;
			str[i++] = rem + '0';
			num = num / 10;
		}
	}
	if(isNegative)
 3d0:	01 2b       	or	r16, r17
 3d2:	29 f0       	breq	.+10     	; 0x3de <int_to_string+0x78>
	str[i++] = '-';
 3d4:	fe 01       	movw	r30, r28
 3d6:	ef 0d       	add	r30, r15
 3d8:	f1 1d       	adc	r31, r1
 3da:	8d e2       	ldi	r24, 0x2D	; 45
 3dc:	80 83       	st	Z, r24
	reverse(str);
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 97 01 	call	0x32e	; 0x32e <reverse>
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	08 95       	ret

000003f0 <main>:
#include <avr/io.h>
#include <LCD.h>
#include <mystr.h>
#include "DS18B20.h"
int main(void)
{	
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	2b 97       	sbiw	r28, 0x0b	; 11
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
 404:	0e 94 81 00 	call	0x102	; 0x102 <LCD_init>
    while (1) 
    {
		LCD_print("Temp: ");
 408:	80 e6       	ldi	r24, 0x60	; 96
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_print>
		char int_str[7];
		char dcm_str[4];
		int_part(int_str);
 410:	ce 01       	movw	r24, r28
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	0e 94 58 01 	call	0x2b0	; 0x2b0 <int_part>
		decimal_part(dcm_str);
 418:	ce 01       	movw	r24, r28
 41a:	08 96       	adiw	r24, 0x08	; 8
 41c:	0e 94 6f 01 	call	0x2de	; 0x2de <decimal_part>
		LCD_print(int_str);
 420:	ce 01       	movw	r24, r28
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_print>
		LCD_print(".");
 428:	87 e6       	ldi	r24, 0x67	; 103
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_print>
		LCD_print(dcm_str);
 430:	ce 01       	movw	r24, r28
 432:	08 96       	adiw	r24, 0x08	; 8
 434:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 438:	2f ef       	ldi	r18, 0xFF	; 255
 43a:	81 ee       	ldi	r24, 0xE1	; 225
 43c:	94 e0       	ldi	r25, 0x04	; 4
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__DATA_REGION_LENGTH__+0x48>
 448:	00 00       	nop
		_delay_ms(200);
		LCD_clear();
 44a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_clear>
 44e:	dc cf       	rjmp	.-72     	; 0x408 <__DATA_REGION_LENGTH__+0x8>

00000450 <__udivmodsi4>:
 450:	a1 e2       	ldi	r26, 0x21	; 33
 452:	1a 2e       	mov	r1, r26
 454:	aa 1b       	sub	r26, r26
 456:	bb 1b       	sub	r27, r27
 458:	fd 01       	movw	r30, r26
 45a:	0d c0       	rjmp	.+26     	; 0x476 <__udivmodsi4_ep>

0000045c <__udivmodsi4_loop>:
 45c:	aa 1f       	adc	r26, r26
 45e:	bb 1f       	adc	r27, r27
 460:	ee 1f       	adc	r30, r30
 462:	ff 1f       	adc	r31, r31
 464:	a2 17       	cp	r26, r18
 466:	b3 07       	cpc	r27, r19
 468:	e4 07       	cpc	r30, r20
 46a:	f5 07       	cpc	r31, r21
 46c:	20 f0       	brcs	.+8      	; 0x476 <__udivmodsi4_ep>
 46e:	a2 1b       	sub	r26, r18
 470:	b3 0b       	sbc	r27, r19
 472:	e4 0b       	sbc	r30, r20
 474:	f5 0b       	sbc	r31, r21

00000476 <__udivmodsi4_ep>:
 476:	66 1f       	adc	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	1a 94       	dec	r1
 480:	69 f7       	brne	.-38     	; 0x45c <__udivmodsi4_loop>
 482:	60 95       	com	r22
 484:	70 95       	com	r23
 486:	80 95       	com	r24
 488:	90 95       	com	r25
 48a:	9b 01       	movw	r18, r22
 48c:	ac 01       	movw	r20, r24
 48e:	bd 01       	movw	r22, r26
 490:	cf 01       	movw	r24, r30
 492:	08 95       	ret

00000494 <__divmodsi4>:
 494:	05 2e       	mov	r0, r21
 496:	97 fb       	bst	r25, 7
 498:	1e f4       	brtc	.+6      	; 0x4a0 <__divmodsi4+0xc>
 49a:	00 94       	com	r0
 49c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__negsi2>
 4a0:	57 fd       	sbrc	r21, 7
 4a2:	07 d0       	rcall	.+14     	; 0x4b2 <__divmodsi4_neg2>
 4a4:	0e 94 28 02 	call	0x450	; 0x450 <__udivmodsi4>
 4a8:	07 fc       	sbrc	r0, 7
 4aa:	03 d0       	rcall	.+6      	; 0x4b2 <__divmodsi4_neg2>
 4ac:	4e f4       	brtc	.+18     	; 0x4c0 <__divmodsi4_exit>
 4ae:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__negsi2>

000004b2 <__divmodsi4_neg2>:
 4b2:	50 95       	com	r21
 4b4:	40 95       	com	r20
 4b6:	30 95       	com	r19
 4b8:	21 95       	neg	r18
 4ba:	3f 4f       	sbci	r19, 0xFF	; 255
 4bc:	4f 4f       	sbci	r20, 0xFF	; 255
 4be:	5f 4f       	sbci	r21, 0xFF	; 255

000004c0 <__divmodsi4_exit>:
 4c0:	08 95       	ret

000004c2 <__negsi2>:
 4c2:	90 95       	com	r25
 4c4:	80 95       	com	r24
 4c6:	70 95       	com	r23
 4c8:	61 95       	neg	r22
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
